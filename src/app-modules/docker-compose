#!/bin/sh
# Copyright 2023 Northern.tech AS
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

set -x

docker_compose_cmd=docker-compose
docker_cmd=docker

unpack_image() {
  local input_file="$1"
  local image_dir="$2"

  if test -d "${image_dir}"; then
    rm -Rf "${image_dir}"
  fi
  tar cvf "$input_file" -C "${image_dir}"
}

# |-- ecaa1158057a2e325f72c5e43c9847fbef370da5a65d6534b1708c99feb7c0e7
  #|   |-- VERSION
  #|   |-- json
  #|   |-- layer.tar.current.sha256sum
  #|   |-- layer.tar.new.sha256sum
  #|   `-- layer.tar.vcdiff
resolve_deep_delta() {
  local application_name="$1"
  local input_file="$2"
  local current_url="$3"
  local new_image_dir="${MODULE_TMPDIR:-${TMPDIR}}"
  local current_image_dir="${MODULE_TMPDIR:-${TMPDIR}}"
  local current_image_file

  if test ! -d "$new_image_dir"; then
    echo "ERROR: neither MODULE_TMPDIR or TMPDIR is set"
    return 1
  fi
  current_image_file="${image_dir}"/`echo "${current_url}" | sha256sum | cut -f1 -d' '`
  if test -f "$current_image_file"; then
    rm -f "${current_image_file}"
  fi
  app_save "${application_name}" "$current_url" "${current_image_file}"
  new_image_dir="${image_dir}/image-`sha256sum "${input_file}" | cut -f1 -d' '`"
  current_image_dir="${image_dir}/image-`sha256sum "${current_image_file}" | cut -f1 -d' '`"
  unpack_image "${input_file}" "${new_image_dir}"
  unpack_image "${current_image_file}" "${current_image_dir}"

}

app_load() {
    local application_name="$1"
    local url="$2"
    local input_file="$3"
    local url_current="$4"

    if test "$OPTIONS" = "deep_delta"; then
      resolve_deep_delta "${application_name}" "${input_file}" "${url_current}"
    fi
    $docker_cmd image load < "$input_file"
}

app_save() {
    local application_name="$1"
    local url="$2"
    local output_file="$3"

    $docker_cmd image save "$url" -o "$output_file"
}

app_rollout() {
    local application_name="$1"
    local manifests_dir="$2"

    $docker_compose_cmd --project-directory "$manifests_dir" up -d > "$manifests_dir"/compose.log 2>&1 &
}

app_stop() {
    local application_name="$1"
    local manifests_dir="$2"

    $docker_compose_cmd --project-directory "$manifests_dir" down >> "$manifests_dir"/compose.log 2>&1
}

case "$1" in
    SAVE)
        shift
        app_save "$@"
        ;;
    LOAD)
        shift
        app_load "$@"
        ;;
    ROLLOUT)
        shift
        app_rollout "$@"
        ;;
    STOP)
        shift
        app_stop "$@"
        ;;
    EXPORT_MANIFEST)
        true
        ;;
    LS_COMPONENTS)
        true
        ;;
    DELETE)
        true
        ;;
    ROLLBACK)
        true
        ;;
    PURGE)
        true
        ;;
    START)
        true
        ;;
    ALIVE)
        true
        ;;
    HEALTHY)
        true
        ;;
    *)
        echo "ERROR: unknown API call: $@"
        exit 1
        ;;
esac
